#!/usr/bin/env node

var fs = require('fs'),
    path = require('path'),
    util = require('util');

var yargs = require('yargs')
  .usage('Usage: $0 -i input-dir/ -o output-dir/')
  .option('pretty', {
    alias: 'p',
    boolean: true,
    description: 'Stringifies individual keys instead of the entire file.',
    default: false
  })
  .option('input', {
    alias: 'i',
    string: true,
    description: 'Directory with input lint files',
    default: path.join(process.cwd(), 'dotfiles')
  })
  .option('output', {
    alias: 'o',
    string: true,
    description: 'Directory to output final lint files',
    default: path.join(process.cwd(), 'dist')
  })
  .option('help', {
    alias: 'h',
    boolean: true,
    description: 'Displays this message'
  });

var argv = yargs.argv,
    isComment = /^\s+\/\//,
    inputDir = path.resolve(argv.input),
    outputDir = path.resolve(argv.output),
    config;

if (argv.help) {
  return yargs.showHelp();
}

//
// ### function stripNull (obj, key)
// Deletes the `key` from the `obj` if the
// value is EXPLICITLY null.
//
function stripNull(obj, key) {
  if (obj[key] == null) {
    delete obj[key];
    return;
  }

  if (!Array.isArray(obj[key]) && typeof obj[key] === 'object') {
    Object.keys(obj[key]).forEach(stripNull.bind(null, obj[key]));
    if (!Object.keys(obj[key]).length) {
      delete obj[key];
    }
  }
}

//
// ### function readAndStrip(file)
// Reads a file specified and strips out any
// comments that exist in it.
//
function readAndStrip(file) {
  var filtered;

  try {
    filtered = JSON.parse(
      fs.readFileSync(path.join(inputDir, file), 'utf8')
        .split('\n')
        .filter(function (line) {
          return !isComment.test(line) && line.replace(/\s/g, '');
        })
        .join('\n')
    );
  } catch (ex) {
    return null;
  }

  console.log('Read dotfiles/%s', file);
  return filtered;
}

//
// ### function isObject
// Silly isObject check
//
function isObject(o) {
  var ptype = Object.prototype.toString
    .call(o)
    .slice(8,14)
    .toLowerCase();

  return ptype === 'object';
}

//
// ### function nestedStringify(obj)
// Does a nested stringify of things
//
function nestedStringify(obj) {
  if (!isObject(obj)) {
    return JSON.stringify(obj);
  }

  return Object.keys(obj).reduce(function (acc, key, i, arr) {
    acc += util.format('\n    "%s": %s', key, JSON.stringify(obj[key]));
    if (i !== arr.length - 1) {
      acc += ',';
    }

    return acc;
  }, '{') + '\n  }';
}

//
// ### function stringify(obj)
// Optionally stringifies each key individually of the
// obj or the entire obj.
//
function stringify(obj) {
  if (!argv.pretty) {
    return JSON.stringify(obj, null, 2);
  }

  return Object.keys(obj).reduce(function (acc, key, i, arr) {
    acc += util.format('\n  "%s": %s', key, nestedStringify(obj[key]));
    if (i !== arr.length - 1) {
      acc += ',';
    }

    return acc;
  }, '{') + '\n}';
}

var files = {
  jscsrc:   readAndStrip('.jscsrc'),
  jshintrc: readAndStrip('.jshintrc'),
  eslintrc: readAndStrip('.eslintrc')
};

console.log('Strip all `null` properties from .jscsrc');
Object.keys(files.jscsrc).forEach(stripNull.bind(null, files.jscsrc));

//
// Now write them all out
//
Object.keys(files).forEach(function (file) {
  if (!files[file]) { return; }

  console.log('Write to dist/%s', file);
  fs.writeFileSync(
    path.join(outputDir, '.' + file),
    stringify(files[file]),
    'utf8'
  );
});
